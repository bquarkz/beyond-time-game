package com.intrepid.nicge.utils;

import java.util.concurrent.Callable;
import java.util.function.Supplier;

public class TriggerOnce< R >
    implements Callable< R >
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constants
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Special Fields And Injections
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Fields
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private boolean isFirstTime;
    private Supplier< Boolean > when;
    private Callable< R > action;
    private R defaultReturn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public TriggerOnce()
    {
        this.isFirstTime = true;
        this.when = () -> true;
        this.defaultReturn = null;
        this.action = () -> defaultReturn;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Factories
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Getters And Setters
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public TriggerOnce< R > usingDefaultReturn( R defaultReturn )
    {
        this.defaultReturn = defaultReturn;
        return this;
    }

    public TriggerOnce< R > when( Supplier< Boolean > when )
    {
        this.when = when;
        return this;
    }

    public TriggerOnce< R > theAction( Runnable action )
    {
        this.action = () -> {
            action.run();
            return defaultReturn;
        };
        return this;
    }

    public TriggerOnce< R > theAction( Callable< R > action )
    {
        this.action = action;
        return this;
    }

    @Override
    public R call() throws Exception
    {
        if( isFirstTime )
        {
            final Boolean shouldItRun = when.get();
            if( shouldItRun != null && shouldItRun )
            {
                final R ret = action.call();
                isFirstTime = false;
                return ret;
            }
        }

        return defaultReturn;
    }

    public R exec()
    {
        try
        {
            return call();
        }
        catch( Exception e )
        {
            return defaultReturn;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inner Classes And Patterns
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
